import React, { useState } from 'react';
import { MatchDetails } from '../types';

function generateMatchSummary(match: MatchDetails): string {
  const {
    date, jourSemaine, domicile, adversaire, scoreEquipe, scoreAdverse,
    saison, buteurs, passeurs, gardien, cartonsJaunes, cartonsRouges, prochainMatch
  } = match;

  const clubName = "US Aignan"; // √† adapter dynamiquement si n√©cessaire
  const lieu = domicile ? "Domicile" : "Ext√©rieur";

  const formatButeurs = buteurs.map(b => `‚Äì ${b.nom} (${b.minute}‚Äô)`).join('\n');
  const formatPasseurs = passeurs.map(p => `‚Äì ${p.nom}`).join('\n');
  const formatJaunes = cartonsJaunes.map(c => `‚Äì ${c.nom} (${c.minute}‚Äô)`).join('\n');
  const formatRouges = cartonsRouges.map(c => `‚Äì ${c.nom} (${c.minute}‚Äô)`).join('\n');
  const cleanSheet = gardien?.cleanSheet ? `‚Äì ${gardien.nom}` : '*n/a*';

  return `üèÜ ${clubName} vs ${adversaire}
üìÖ ${jourSemaine} ${date} | üìç ${lieu} | üïä Saison ${saison}

üîö Score final : ${clubName} ${scoreEquipe} ‚Äì ${scoreAdverse} ${adversaire}

üìå R√©sum√© du match :
${clubName} s‚Äôest impos√© ce ${jourSemaine} face √† ${adversaire} au terme d‚Äôun match disput√© et rythm√©. L‚Äô√©quipe a su faire la diff√©rence avec un jeu collectif solide.

${buteurs.length > 0 ? `Les buts ont √©t√© marqu√©s par :\n${formatButeurs}` : "Aucun but marqu√©."}

${passeurs.length > 0 ? `\nüéØ Passeurs d√©cisifs :\n${formatPasseurs}` : ""}

üß§ Clean sheet :
${cleanSheet}

üü® Cartons jaunes :
${formatJaunes || "*Aucun*"}

üü• Cartons rouges :
${formatRouges || "*Aucun*"}

‚úÖ Bilan du match :
Belle performance de l‚Äô√©quipe qui continue sur sa lanc√©e. Bravo √† tous ! üí™

üìÜ Prochain rendez-vous : ${prochainMatch || "√† venir"}

#MatchDay #${scoreEquipe > scoreAdverse ? "Victoire" : scoreEquipe === scoreAdverse ? "MatchNul" : "D√©faite"} #${clubName.replace(/\s/g, "")} #Saison${saison.replace(/-/g, "_")}`;
}

export default function MatchSummaryGenerator({ match }: { match: MatchDetails }) {
  const [summary, setSummary] = useState('');

  const handleGenerate = () => {
    const result = generateMatchSummary(match);
    setSummary(result);
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(summary);
  };

  return (
    <div className="p-4 border rounded-lg shadow-md bg-white space-y-4">
      <button onClick={handleGenerate} className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
        G√©n√©rer le r√©sum√©
      </button>

      {summary && (
        <>
          <textarea
            className="w-full h-80 p-2 border rounded"
            value={summary}
            onChange={e => setSummary(e.target.value)}
          />
          <div className="flex justify-end space-x-2">
            <button onClick={handleCopy} className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
              Copier le texte
            </button>
            <button
              onClick={() => window.print()}
              className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
            >
              Imprimer / Exporter PDF
            </button>
          </div>
        </>
      )}
    </div>
  );
}
